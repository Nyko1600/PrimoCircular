/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package listaprimoscirculares;

import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nico
 */
public class ListaPrimosCirculares extends javax.swing.JFrame {

    /**
     * Creates new form ListaPrimosCirculares
     */
    public ListaPrimosCirculares() {
        // Inicio el temporizador
        time_start = System.currentTimeMillis();
        initComponents();
        //Declaro una lista global, que contiene todos los valores primos por debajo de un millon
        ArrayList<Integer> lista=CalcularPrimos();
        //Declaro los hilos y les paso la lista y el valor de inicio
        Thread hilo1 = new Hilo(lista,0);
        Thread hilo2 = new Hilo(lista,1);
        Thread hilo3 = new Hilo(lista,2);
        //Inicio los hilos
        hilo1.start();
        hilo2.start();
        hilo3.start();
        //Espero un segundo a que terminen los hilos para mostrar la lista
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ListaPrimosCirculares.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Cargo los valores al area de 
        mostrarLista();
        
    }
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //Declaro las variables para el temporizador
    long time_start, time_end;
    
    ArrayList<Integer> primoCircular = new ArrayList<>();
    //Esta funcion muestra la lista primoCircular en un area de texto
    private void mostrarLista(){
        //Ordeno la lista
        Collections.sort(primoCircular);
        //Recorrro la lista y voy mostrando los valores
        for(int i=0;i<primoCircular.size();i++){
            jTextArea1.append(primoCircular.get(i).toString());
            jTextArea1.append(System.getProperty("line.separator"));
        }
        //Muestro le tiempo que toma la ejecuccion
        System.out.println("the task has taken "+ ( time_end - time_start ) +" milliseconds");
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Funcion que calcula todos los numeros primos por debajo de un millon
    private ArrayList<Integer> CalcularPrimos(){
    int c, i,bandera=0, h=0;
        double raizC;
        int cEntero;
        //Creo una lista donde guardare los numeros primos
        ArrayList<Integer> lista = new ArrayList<>(); 
        // Agrego el 2 a la lista por ser el unico primo par
        lista.add(2);
        // El bucle reccorre todos los valores impares menores a un millon, dado que los numeros primos son solo impares a excepci√≥n del numero 2
        for (c=3;c<1000000;c=c+2){
            // Calculo la raiz de c 
            raizC=Math.sqrt(c);
            // Conveierto la raizC a entero
            cEntero = (int) Math.round(raizC);
            i=0;
            // Comienzo a recorrer los valores que ya tengo en la lista
            while( lista.size()>i ){
            // Si los valores de la lista son mayores a la raiz cuadrada de c entonces salgo del bucle, por que aseguro que ya no hay numeros primos
                if(lista.get(i)>cEntero){
                    break;
                }
                // Divido el valor del contador por el valor actual de la lista, si el resto es cero quiere decir que son multiplo y por tanto no es numero primo
                if(c%lista.get(i)==0 ){
                    bandera=1;
                    break;
                }
                i++;
            }
            //Si bandera es igual a 0 quiere decir que el numero es primo, y lo agrego en la lista
            if(bandera==0){
                lista.add(c);
            }
                bandera=0;
        }
        /*//Imprimir lista de todos los numeros primos por debajo de un millon
        for(h=0 ; h < lista.size() ; h++){
        System.out.println(lista.get(h));
        }*/ 
        return lista;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
                      
    
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaPrimosCirculares().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    private class Hilo extends Thread {
        ArrayList<Integer> lista;
        int inicio;

        public Hilo(ArrayList<Integer> Lista, int INICIO){
            lista=Lista;    
            inicio=INICIO;
        }
        public void run()
        {
            char numero[], aux;
            int bandera=0;
            //Este bucle recorre todos los valores de lista, para analizar si son primos cirulares
            for(int i=inicio ; i < lista.size() ; i=i+3){ 
                //Se transforma el numero en una cadena de caracteres
                numero=String.valueOf(lista.get(i)).toCharArray();
                //Recorre  la cadena de caracteres 'numero'
                for(int k=0 ; k<numero.length ; k++){
                    //Guardo el primer caracter de la izquierda
                    aux=numero[0];
                    //Desplazo todos los caracteres una posicion a la izquierda
                    for(int c=0 ; c<numero.length-1 ;c++)
                    {   
                        numero[c]=numero[c+1];
                    }
                    //Agrego el que era el primer caracter al final
                    numero[numero.length-1]=aux;
                    //Convierto la cadena 'numero' a un entero y calculo la raiz cuadrada
                    double raizNumero=Math.sqrt(Integer.parseInt(new String(numero)));
                    // Redondeo la raiz cuadrada a entero
                    int raizNumeroEntero = (int) Math.round(raizNumero);
                    int j=0;
                    //En este bucle se recorre todos los primos menores o iguales a la raiz cuadrada del numero
                    while(lista.get(j)<=raizNumeroEntero){
                        //Si el resto entre el numero y alguno de los valores de la lista que contiene los primos es cero, entonces el numero no es primo
                        if(Integer.parseInt(new String(numero))%lista.get(j)==0 ){
                            bandera=1;
                            break;
                        }
                        j++;
                    }
                    //Si bandera es uno quiere decir que el numero en la posicion i no es primo circular 
                    //por que al menos unas de sus rotaciones no es primo, 
                    //por lo tanto detengo el bucle y continuo con el siguiente numero en la posicion 'i'
                    if(bandera==1)
                    {
                        break;
                    }
                }
                //Si bandera continua en 0 el valor de la lista primo que estoy analizando es primo circular y se agrega a la lista global
                if(bandera==0){
                    primoCircular.add(lista.get(i));
                }
                //Vuelvo bandera a cero para la proxima operacion
                bandera=0;
            }
            //Seteo el tiempo en el que termino el hilo
            time_end = System.currentTimeMillis();            
        }       
    }
    
}
